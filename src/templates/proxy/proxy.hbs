package {{snake packageName}}

import (
	{{#unless skeletonStructure}}
	"fmt"
	{{#if getAllMethod}}
	"log"
	{{/if}}
	{{/unless}}
	"context"
	"github.com/mypurecloud/platform-client-sdk-go/{{version}}/platformclientv2"
)

/*
The genesyscloud_{{snake packageName}}_proxy.go file contains the proxy structures and methods that interact
with the Genesys Cloud SDK. We use composition here for each function on the proxy so individual functions can be stubbed
out during testing.
*/

// internalProxy holds a proxy instance that can be used throughout the package
var internalProxy *{{packageName}}Proxy

// Type definitions for each func on our proxy so we can easily mock them out later
{{#if createMethod}}
	type create{{pascal packageName}}Func func(ctx context.Context, p *{{packageName}}Proxy, {{name}} *platformclientv2.{{sdk name}}) (*platformclientv2.{{sdk name}}, error)
{{/if}}
{{#if getAllMethod}}
	type getAll{{pascal packageName}}Func func(ctx context.Context, p *{{packageName}}Proxy) (*[]platformclientv2.{{sdk name}}, error)
	type get{{pascal packageName}}IdByNameFunc func(ctx context.Context, p *{{packageName}}Proxy, name string) (id string, retryable bool, err error)
{{/if}}
{{#if readMethod}}
	type get{{pascal packageName}}ByIdFunc func(ctx context.Context, p *{{packageName}}Proxy, id string) ({{name}} *platformclientv2.{{sdk name}}, responseCode int, err error)
{{/if}}
{{#if updateMethod}}
	type update{{pascal packageName}}Func func(ctx context.Context, p *{{packageName}}Proxy, id string, {{name}} *platformclientv2.{{sdk name}}) (*platformclientv2.{{sdk name}}, error)
{{/if}}
{{#if deleteMethod}}
	type delete{{pascal packageName}}Func func(ctx context.Context, p *{{packageName}}Proxy, id string) (responseCode int, err error)
{{/if}}

// {{packageName}}Proxy contains all of the methods that call genesys cloud APIs.
type {{packageName}}Proxy struct {
	clientConfig                  *platformclientv2.Configuration
	{{#if api}}
		{{apiCamel}}                  *platformclientv2.{{api}}
	{{/if}}
	{{#if createMethod}}
		create{{pascal packageName}}Attr      create{{pascal packageName}}Func
	{{/if}}
	{{#if getAllMethod}}
		getAll{{pascal packageName}}Attr      getAll{{pascal packageName}}Func
		get{{pascal packageName}}IdByNameAttr get{{pascal packageName}}IdByNameFunc
	{{/if}}
	{{#if readMethod}}
		get{{pascal packageName}}ByIdAttr     get{{pascal packageName}}ByIdFunc
	{{/if}}
	{{#if updateMethod}}
		update{{pascal packageName}}Attr      update{{pascal packageName}}Func
	{{/if}}
	{{#if deleteMethod}}
		delete{{pascal packageName}}Attr      delete{{pascal packageName}}Func
	{{/if}}
}

// new{{pascal packageName}}Proxy initializes the {{english packageName}} proxy with all of the data needed to communicate with Genesys Cloud
func new{{pascal packageName}}Proxy(clientConfig *platformclientv2.Configuration) *{{packageName}}Proxy {
	{{#if api}}
	api := platformclientv2.New{{api}}WithConfig(clientConfig)
	{{/if}}
	return &{{packageName}}Proxy{
		clientConfig:                   clientConfig,
		{{#if api}}
			{{apiCamel}}:                   api,
		{{/if}}
		{{#if createMethod}}
			create{{pascal packageName}}Attr:       create{{pascal packageName}}Fn,
		{{/if}}
		{{#if getAllMethod}}
			getAll{{pascal packageName}}Attr:       getAll{{pascal packageName}}Fn,
			get{{pascal packageName}}IdByNameAttr: 	get{{pascal packageName}}IdByNameFn,
		{{/if}}
		{{#if readMethod}}
			get{{pascal packageName}}ByIdAttr:     	get{{pascal packageName}}ByIdFn,
		{{/if}}
		{{#if updateMethod}}
			update{{pascal packageName}}Attr:      	update{{pascal packageName}}Fn,
		{{/if}}
		{{#if deleteMethod}}
			delete{{pascal packageName}}Attr:      	delete{{pascal packageName}}Fn,
		{{/if}}
	} 
}

// get{{pascal packageName}}Proxy acts as a singleton to for the internalProxy.  It also ensures
// that we can still proxy our tests by directly setting internalProxy package variable
func get{{pascal packageName}}Proxy(clientConfig *platformclientv2.Configuration) *{{packageName}}Proxy {
	if internalProxy == nil {
		internalProxy = new{{pascal packageName}}Proxy(clientConfig)
	}

	return internalProxy
}

{{#if createMethod}}
	// create{{pascal packageName}} creates a Genesys Cloud {{english packageName}}
	func (p *{{packageName}}Proxy) create{{pascal packageName}}(ctx context.Context, {{packageName}} *platformclientv2.{{sdk name}}) (*platformclientv2.{{sdk name}}, error) {
		return p.create{{pascal packageName}}Attr(ctx, p, {{packageName}})
	}
{{/if}}
{{#if getAllMethod}}
	// get{{pascal packageName}} retrieves all Genesys Cloud {{english packageName}}
	func (p *{{packageName}}Proxy) getAll{{pascal packageName}}(ctx context.Context) (*[]platformclientv2.{{sdk name}}, error) {
		return p.getAll{{pascal packageName}}Attr(ctx, p)
	}

	// get{{pascal packageName}}IdByName returns a single Genesys Cloud {{english packageName}} by a name
	func (p *{{packageName}}Proxy) get{{pascal packageName}}IdByName(ctx context.Context, name string) (id string, retryable bool, err error) {
		return p.get{{pascal packageName}}IdByNameAttr(ctx, p, name)
	}
{{/if}}
{{#if readMethod}}
	// get{{pascal packageName}}ById returns a single Genesys Cloud {{english packageName}} by Id
	func (p *{{packageName}}Proxy) get{{pascal packageName}}ById(ctx context.Context, id string) ({{packageName}} *platformclientv2.{{sdk name}}, statusCode int, err error) {
		return p.get{{pascal packageName}}ByIdAttr(ctx, p, id)
	}
{{/if}}
{{#if updateMethod}}
	// update{{pascal packageName}} updates a Genesys Cloud {{english packageName}}
	func (p *{{packageName}}Proxy) update{{pascal packageName}}(ctx context.Context, id string, {{packageName}} *platformclientv2.{{sdk name}}) (*platformclientv2.{{sdk name}}, error) {
		return p.update{{pascal packageName}}Attr(ctx, p, id, {{packageName}})
	}
{{/if}}
{{#if deleteMethod}}
	// delete{{pascal packageName}} deletes a Genesys Cloud {{english packageName}} by Id
	func (p *{{packageName}}Proxy) delete{{pascal packageName}}(ctx context.Context, id string) (statusCode int, err error) {
		return p.delete{{pascal packageName}}Attr(ctx, p, id)
	}
{{/if}}
{{#if createMethod}}
	// create{{pascal packageName}}Fn is an implementation function for creating a Genesys Cloud {{english packageName}}
	func create{{pascal packageName}}Fn(ctx context.Context, p *{{packageName}}Proxy, {{packageName}} *platformclientv2.{{sdk name}}) (*platformclientv2.{{sdk name}}, error) {
		{{#unless skeletonStructure}}
		{{name}}, _, err := p.{{apiCamel}}.{{createMethod}}(*{{packageName}})
		if err != nil {
			return nil, fmt.Errorf("Failed to create {{english packageName}}: %s", err)
		}

		return {{name}}, nil
		{{else}}
		return nil, nil
		{{/unless}}
	}
{{/if}}
{{#if getAllMethod}}
	// getAll{{pascal packageName}}Fn is the implementation for retrieving all {{english packageName}} in Genesys Cloud
	func getAll{{pascal packageName}}Fn(ctx context.Context, p *{{packageName}}Proxy) (*[]platformclientv2.{{sdk name}}, error) {
		{{#unless skeletonStructure}}
		var all{{pascal name}}s []platformclientv2.{{sdk name}}
		const pageSize = 100
		
		{{name}}s, _, err := p.{{apiCamel}}.{{getAllMethod}}()
		if err != nil {
			return nil, fmt.Errorf("Failed to get {{english name}}: %v", err)	
		}
		if {{name}}s.Entities == nil || len(*{{name}}s.Entities) == 0 {
			return &all{{pascal name}}s, nil
		}
		for _, {{name}} := range *{{name}}s.Entities {
			all{{pascal name}}s = append(all{{pascal name}}s, {{name}})
		}

		for pageNum := 2; pageNum <= *{{name}}s.PageCount ; pageNum++ {

			{{name}}s, _, err := p.{{apiCamel}}.{{getAllMethod}}()
			if err != nil {
				return nil, fmt.Errorf("Failed to get {{english name}}: %v", err)
			}

			if {{name}}s.Entities == nil || len(*{{name}}s.Entities) == 0 {
				break
			}

			for _, {{name}} := range *{{name}}s.Entities {
				all{{pascal name}}s = append(all{{pascal name}}s, {{name}})
			}
		}

		return &all{{pascal name}}s, nil
		{{else}}
		return nil, nil
		{{/unless}}
	}

	// get{{pascal packageName}}IdByNameFn is an implementation of the function to get a Genesys Cloud {{english packageName}} by name
	func get{{pascal packageName}}IdByNameFn(ctx context.Context, p *{{packageName}}Proxy, name string) (id string, retryable bool, err error) {
		{{#unless skeletonStructure}}
		{{name}}s, err := getAll{{pascal packageName}}Fn(ctx, p)
		if err != nil {
			return "", false, err
		}

		if {{name}}s.Entities == nil || len(*{{name}}s.Entities) == 0 {
			return "", true, fmt.Errorf("No {{english packageName}} found with name %s", name)
		}

		var {{name}} platformclientv2.{{sdk name}}
		for _, {{name}}Sdk := range *{{name}}s.Entities {
			if *{{name}}.Name == name {
				log.Printf("Retrieved the {{english packageName}} id %s by name %s", *{{name}}Sdk.Id, name)
				{{name}} = {{name}}Sdk
				return *{{name}}.Id, false, nil
			}
		}

		return "", false, fmt.Errorf("Unable to find {{english packageName}} with name %s", name)
		{{else}}
		return "", false, nil
		{{/unless}}
	}
{{/if}}
{{#if readMethod}}
	// get{{pascal packageName}}ByIdFn is an implementation of the function to get a Genesys Cloud {{english packageName}} by Id
	func get{{pascal packageName}}ByIdFn(ctx context.Context, p *{{packageName}}Proxy, id string) ({{packageName}} *platformclientv2.{{sdk name}}, statusCode int, err error) {
		{{#unless skeletonStructure}}
		{{name}}, resp, err := p.{{apiCamel}}.{{readMethod}}(id)
		if err != nil {
			return nil, resp.StatusCode, fmt.Errorf("Failed to retrieve {{english packageName}} by id %s: %s", id, err)
		}

		return {{name}}, resp.StatusCode, nil
		{{else}}
		return nil, 0, nil
		{{/unless}}
	}
{{/if}}
{{#if updateMethod}}
	// update{{pascal packageName}}Fn is an implementation of the function to update a Genesys Cloud {{english packageName}}
	func update{{pascal packageName}}Fn(ctx context.Context, p *{{packageName}}Proxy, id string, {{packageName}} *platformclientv2.{{sdk name}}) (*platformclientv2.{{sdk name}}, error) {
		{{#unless skeletonStructure}}
		{{name}}, _, err = p.{{apiCamel}}.{{updateMethod}}(id, *{{name}})
		if err != nil {
			return nil, fmt.Errorf("Failed to update {{english packageName}}: %s", err)
		}
		return {{name}}, nil
		{{else}}
		return nil, nil
		{{/unless}}
	}
{{/if}}
{{#if deleteMethod}}
	// delete{{pascal packageName}}Fn is an implementation function for deleting a Genesys Cloud {{english packageName}}
	func delete{{pascal packageName}}Fn(ctx context.Context, p *{{packageName}}Proxy, id string) (statusCode int, err error) {
		{{#unless skeletonStructure}}
		resp, err := p.{{apiCamel}}.{{deleteMethod}}(id)
		if err != nil {
			return resp.StatusCode, fmt.Errorf("Failed to delete {{english packageName}}: %s", err)
		}

		return resp.StatusCode, nil
		{{else}}
		return 0, nil
		{{/unless}}
	}
{{/if}}