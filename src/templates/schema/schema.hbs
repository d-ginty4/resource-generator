package {{snakeName}}

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	gcloud "terraform-provider-genesyscloud/genesyscloud"
	resourceExporter "terraform-provider-genesyscloud/genesyscloud/resource_exporter"
	registrar "terraform-provider-genesyscloud/genesyscloud/resource_register"
)

/*
resource_genesycloud_{{snakeName}}_schema.go holds four functions within it:

1.  The registration code that registers the Datasource, Resource and Exporter for the package.
2.  The resource schema definitions for the {{snakeName}} resource.
3.  The datasource schema definitions for the {{snakeName}} datasource.
4.  The resource exporter configuration for the {{snakeName}} exporter.
*/
const resourceName = "genesyscloud_{{snakeName}}"

// SetRegistrar registers all of the resources, datasources and exporters in the package
func SetRegistrar(regInstance registrar.Registrar) {
	regInstance.RegisterResource(resourceName, Resource{{pascalName}}())
	regInstance.RegisterDataSource(resourceName, DataSource{{pascalName}}())
	regInstance.RegisterExporter(resourceName, {{pascalName}}Exporter())
}

// Resource{{pascalName}} registers the genesyscloud_{{snakeName}} resource with Terraform
func Resource{{pascalName}}() *schema.Resource {
	{{#unless skeletonStructure}}
	{{#each nestedObjectSchemas}}
	{{{this}}}

	{{/each}}
	{{/unless}}
	return &schema.Resource{
		Description: `Genesys Cloud {{englishName}}`,

		CreateContext: gcloud.CreateWithPooledClient(create{{pascalName}}),
		ReadContext:   gcloud.ReadWithPooledClient(read{{pascalName}}),
		UpdateContext: gcloud.UpdateWithPooledClient(update{{pascalName}}),
		DeleteContext: gcloud.DeleteWithPooledClient(delete{{pascalName}}),
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
		SchemaVersion: 1,
		Schema: map[string]*schema.Schema{
			{{#unless skeletonStructure}}
			{{#each properties}}
			{{{this}}}
			{{/each}}
			{{/unless}}
		},
	}
}																																																											

// {{pascalName}}Exporter returns the resourceExporter object used to hold the genesyscloud_{{snakeName}} exporter's config
func {{pascalName}}Exporter() *resourceExporter.ResourceExporter {
	return &resourceExporter.ResourceExporter{
		GetResourcesFunc: gcloud.GetAllWithPooledClient(getAllAuth{{pascalName}}s),
		RefAttrs: map[string]*resourceExporter.RefAttrSettings{
			// TODO: Add any reference attributes here
		},
	}
}

// DataSource{{pascalName}} registers the genesyscloud_{{snakeName}} data source
func DataSource{{pascalName}}() *schema.Resource {
	return &schema.Resource{
		Description: `Genesys Cloud {{englishName}} data source. Select an {{englishName}} by name`,
		ReadContext: gcloud.ReadWithPooledClient(dataSource{{pascalName}}Read),
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
		Schema: map[string]*schema.Schema{
			"name": {
				Description: `{{englishName}} name`,
				Type:        schema.TypeString,
				Required:    true,
			},
		},
	}
}