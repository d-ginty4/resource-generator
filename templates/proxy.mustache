package {{snakeName}}

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"strings"

	"github.com/mypurecloud/platform-client-sdk-go/v105/platformclientv2"
)

/*
The genesyscloud_{{snakeName}}_proxy.go file contains the proxy structures and methods that interact
with the Genesys Cloud SDK. We use composition here for each function on the proxy so individual functions can be stubbed
out during testing.
*/

// internalProxy holds a proxy instance that can be used throughout the package
var internalProxy *{{camelName}}Proxy

// Type definitions for each func on our proxy so we can easily mock them out later
type create{{pascalName}}Func func(ctx context.Context, p *{{camelName}}Proxy, ruleset *platformclientv2.{{mainObject}}) (*platformclientv2.{{mainObject}}, error)
type getAll{{pascalName}}Func func(ctx context.Context, p *{{camelName}}Proxy) (*[]platformclientv2.Ruleset, error)
type get{{pascalName}}ByIdFunc func(ctx context.Context, p *{{camelName}}Proxy, id string) (ruleset *platformclientv2.{{mainObject}}, responseCode int, err error)
type get{{pascalName}}IdByNameFunc func(ctx context.Context, p *{{camelName}}Proxy, name string) (id string, retryable bool, err error)
type update{{pascalName}}Func func(ctx context.Context, p *{{camelName}}Proxy, id string, ruleset *platformclientv2.{{mainObject}}) (*platformclientv2.{{mainObject}}, error)
type delete{{pascalName}}Func func(ctx context.Context, p *{{camelName}}Proxy, id string) (responseCode int, err error)

// {{camelName}}Proxy contains all of the methods that call genesys cloud APIs.
type {{camelName}}Proxy struct {
	clientConfig                   *platformclientv2.Configuration
	outboundApi                    *platformclientv2.OutboundApi
	create{{pascalName}}Attr      create{{pascalName}}Func
	getAll{{pascalName}}Attr      getAll{{pascalName}}Func
	get{{pascalName}}ByIdAttr     get{{pascalName}}ByIdFunc
	get{{pascalName}}IdByNameAttr get{{pascalName}}IdByNameFunc
	update{{pascalName}}Attr      update{{pascalName}}Func
	delete{{pascalName}}Attr      delete{{pascalName}}Func
}

// new{{pascalName}}Proxy initializes the ruleset proxy with all of the data needed to communicate with Genesys Cloud
func new{{pascalName}}Proxy(clientConfig *platformclientv2.Configuration) *{{camelName}}Proxy {
	api := platformclientv2.NewOutboundApiWithConfig(clientConfig)
	return &outboundRulesetProxy{
		clientConfig:                   clientConfig,
		outboundApi:                    api,
		create{{pascalName}}Attr:      create{{pascalName}}Fn,
		getAll{{pascalName}}Attr:      getAll{{pascalName}}Fn,
		get{{pascalName}}ByIdAttr:     get{{pascalName}}ByIdFn,
		get{{pascalName}}IdByNameAttr: get{{pascalName}}IdByNameFn,
		update{{pascalName}}Attr:      update{{pascalName}}Fn,
		delete{{pascalName}}Attr:      delete{{pascalName}}Fn,
	}
}

// get{{pascalName}}Proxy acts as a singleton to for the internalProxy.  It also ensures
// that we can still proxy our tests by directly setting internalProxy package variable
func get{{pascalName}}Proxy(clientConfig *platformclientv2.Configuration) *{{camelName}}Proxy {
	if internalProxy == nil {
		internalProxy = new{{pascalName}}Proxy(clientConfig)
	}

	return internalProxy
}

// create{{pascalName}} creates a Genesys Cloud {{englishName}}
func (p *{{camelName}}Proxy) create{{pascalName}}(ctx context.Context, {{camelName}} *platformclientv2.{{mainObject}}) (*platformclientv2.{{mainObject}}, error) {
	return p.create{{pascalName}}Attr(ctx, p, {{camelName}})
}

// get{{pascalName}} retrieves all Genesys Cloud {{englishName}}
func (p *{{camelName}}Proxy) getAll{{pascalName}}(ctx context.Context) (*[]platformclientv2.{{mainObject}}, error) {
	return p.getAll{{pascalName}}Attr(ctx, p)
}

// get{{pascalName}}ById returns a single Genesys Cloud {{englishName}} by Id
func (p *{{camelName}}Proxy) get{{pascalName}}ById(ctx context.Context, id string) ({{camelName}} *platformclientv2.{{mainObject}}, statusCode int, err error) {
	return p.get{{pascalName}}ByIdAttr(ctx, p, id)
}

// get{{pascalName}}IdByName returns a single Genesys Cloud {{englishName}} by a name
func (p *{{camelName}}Proxy) get{{pascalName}}IdByName(ctx context.Context, name string) (id string, retryable bool, err error) {
	return p.get{{pascalName}}IdByNameAttr(ctx, p, name)
}

// update{{pascalName}} updates a Genesys Cloud {{englishName}}
func (p *{{camelName}}Proxy) update{{pascalName}}(ctx context.Context, id string, {{camelName}} *platformclientv2.{{mainObject}}) (*platformclientv2.{{mainObject}}, error) {
	return p.update{{pascalName}}Attr(ctx, p, id, {{camelName}})
}

// delete{{pascalName}} deletes a Genesys Cloud {{englishName}} by Id
func (p *{{camelName}}Proxy) delete{{pascalName}}(ctx context.Context, id string) (statusCode int, err error) {
	return p.delete{{pascalName}}Attr(ctx, p, id)
}

// create{{pascalName}}Fn is an implementation function for creating a Genesys Cloud {{englishName}}
func create{{pascalName}}Fn(ctx context.Context, p *{{camelName}}Proxy, {{camelName}} *platformclientv2.{{mainObject}}) (*platformclientv2.{{mainObject}}, error) {
	
}

// getAll{{pascalName}}Fn is the implementation for retrieving all {{englishName}} in Genesys Cloud
func getAll{{pascalName}}Fn(ctx context.Context, p *{{camelName}}Proxy) (*[]platformclientv2.{{mainObject}}, error) {
	
}

// get{{pascalName}}ByIdFn is an implementation of the function to get a Genesys Cloud {{englishName}} by Id
func get{{pascalName}}ByIdFn(ctx context.Context, p *{{camelName}}Proxy, id string) ({{camelName}} *platformclientv2.{{mainObject}}, statusCode int, err error) {
	
}

// get{{pascalName}}IdBySearchFn is an implementation of the function to get a Genesys Cloud {{englishName}} by name
func get{{pascalName}}IdByNameFn(ctx context.Context, p *{{camelName}}Proxy, name string) (id string, retryable bool, err error) {
	
}

// update{{pascalName}}Fn is an implementation of the function to update a Genesys Cloud {{englishName}}
func update{{pascalName}}Fn(ctx context.Context, p *{{camelName}}Proxy, id string, {{camelName}} *platformclientv2.{{mainObject}}) (*platformclientv2.{{mainObject}}, error) {
	
}

// delete{{pascalName}}Fn is an implementation function for deleting a Genesys Cloud {{englishName}}
func delete{{pascalName}}Fn(ctx context.Context, p *{{camelName}}Proxy, id string) (statusCode int, err error) {
	
}
