package {{resourceName}}

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	gcloud "terraform-provider-genesyscloud/genesyscloud"
	resourceExporter "terraform-provider-genesyscloud/genesyscloud/resource_exporter"
	registrar "terraform-provider-genesyscloud/genesyscloud/resource_register"
)

/*
resource_genesycloud_{{resourceName}}_schema.go holds four functions within it:

1.  The registration code that registers the Datasource, Resource and Exporter for the package.
2.  The resource schema definitions for the {{resourceName}} resource.
3.  The datasource schema definitions for the {{resourceName}} datasource.
4.  The resource exporter configuration for the {{resourceName}} exporter.
*/
const resourceName = "genesyscloud_{{resourceName}}"

// SetRegistrar registers all of the resources, datasources and exporters in the package
func SetRegistrar(regInstance registrar.Registrar) {
	regInstance.RegisterResource(resourceName, Resource{{funcName}}())
	regInstance.RegisterDataSource(resourceName, DataSource{{funcName}}())
	regInstance.RegisterExporter(resourceName, {{funcName}}Exporter())
}

// Resource{{funcName}} registers the genesyscloud_{{resourceName}} resource with Terraform
func Resource{{funcName}}() *schema.Resource {
	{{#nestedObjects}}
	{{objectName}}Resource := &schema.Resource{
		Schema: map[string]*schema.Schema{
			{{#properties}}
			"{{name}}": {
				Description: "{{description}}",{{#required}}
				Required:    true,{{/required}}{{^required}}
				Optional:    true,{{/required}}
				Type:        {{type}},{{#nestedResource}}
				Elem:        {{nestedResource}}Resource,{{/nestedResource}}
			},
			{{/properties}}
		},
	}

	{{/nestedObjects}}
	return &schema.Resource{
		Description: `Genesys Cloud {{englishName}}`,

		CreateContext: gcloud.CreateWithPooledClient({{createFunctionName}}),
		ReadContext:   gcloud.ReadWithPooledClient({{readFunctionName}}),
		UpdateContext: gcloud.UpdateWithPooledClient({{updateFunctionName}}),
		DeleteContext: gcloud.DeleteWithPooledClient({{deleteFunctionName}}),
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
		SchemaVersion: 1,
		Schema: map[string]*schema.Schema{
			{{#properties}}
			"{{name}}": {
				Description: "{{description}}",{{#required}}
				Required:    true,{{/required}}{{^required}}
				Optional:    true,{{/required}}
				Type:        {{type}},{{#nestedResource}}
				Elem:        {{nestedResource}}Resource,{{/nestedResource}}
			},
			{{/properties}}	
		},
	}
}																																																											

// {{funcName}}Exporter returns the resourceExporter object used to hold the genesyscloud_{{resourceName}} exporter's config
func {{funcName}}Exporter() *resourceExporter.ResourceExporter {
	return &resourceExporter.ResourceExporter{
		GetResourcesFunc: gcloud.GetAllWithPooledClient({{exporterGetFunctionName}}),
		RefAttrs: map[string]*resourceExporter.RefAttrSettings{
			// TODO: Add any reference attributes here
		},
	}
}

// DataSource{{funcName}} registers the genesyscloud_{{resourceName}} data source
func DataSource{{funcName}}() *schema.Resource {
	return &schema.Resource{
		Description: `Genesys Cloud {{englishName}} data source. Select an {{englishName}} by name`,
		ReadContext: gcloud.ReadWithPooledClient({{dataSourceReadFunctionName}}),
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
		Schema: map[string]*schema.Schema{
			"name": {
				Description: `{{englishName}} name`,
				Type:        schema.TypeString,
				Optional:    true,
			},
		},
	}
}